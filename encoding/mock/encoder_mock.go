// Code generated by MockGen. DO NOT EDIT.
// Source: encoding/encoder.go

// Package mock_encoding is a generated GoMock package.
package mock_encoding

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoder) Decode(d string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", d)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderMockRecorder) Decode(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoder)(nil).Decode), d)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(d []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), d)
}

// MockEncodeable is a mock of Encodeable interface.
type MockEncodeable struct {
	ctrl     *gomock.Controller
	recorder *MockEncodeableMockRecorder
}

// MockEncodeableMockRecorder is the mock recorder for MockEncodeable.
type MockEncodeableMockRecorder struct {
	mock *MockEncodeable
}

// NewMockEncodeable creates a new mock instance.
func NewMockEncodeable(ctrl *gomock.Controller) *MockEncodeable {
	mock := &MockEncodeable{ctrl: ctrl}
	mock.recorder = &MockEncodeableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncodeable) EXPECT() *MockEncodeableMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockEncodeable) Encode(d []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncodeableMockRecorder) Encode(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncodeable)(nil).Encode), d)
}

// MockDecodeable is a mock of Decodeable interface.
type MockDecodeable struct {
	ctrl     *gomock.Controller
	recorder *MockDecodeableMockRecorder
}

// MockDecodeableMockRecorder is the mock recorder for MockDecodeable.
type MockDecodeableMockRecorder struct {
	mock *MockDecodeable
}

// NewMockDecodeable creates a new mock instance.
func NewMockDecodeable(ctrl *gomock.Controller) *MockDecodeable {
	mock := &MockDecodeable{ctrl: ctrl}
	mock.recorder = &MockDecodeableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecodeable) EXPECT() *MockDecodeableMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecodeable) Decode(d string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", d)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockDecodeableMockRecorder) Decode(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecodeable)(nil).Decode), d)
}
